// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Vect.pb.h"
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameObject_2eproto {
  static const uint32_t offsets[];
};
class GameObject_proto;
struct GameObject_protoDefaultTypeInternal;
extern GameObject_protoDefaultTypeInternal _GameObject_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GameObject_proto* Arena::CreateMaybeMessage<::GameObject_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GameObject_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GameObject_proto) */ {
 public:
  inline GameObject_proto() : GameObject_proto(nullptr) {}
  ~GameObject_proto() override;
  explicit PROTOBUF_CONSTEXPR GameObject_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameObject_proto(const GameObject_proto& from);
  GameObject_proto(GameObject_proto&& from) noexcept
    : GameObject_proto() {
    *this = ::std::move(from);
  }

  inline GameObject_proto& operator=(const GameObject_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameObject_proto& operator=(GameObject_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GameObject_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameObject_proto* internal_default_instance() {
    return reinterpret_cast<const GameObject_proto*>(
               &_GameObject_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameObject_proto& a, GameObject_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(GameObject_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameObject_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameObject_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameObject_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GameObject_proto& from);
  void MergeFrom(const GameObject_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameObject_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameObject_proto";
  }
  protected:
  explicit GameObject_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoMatrixFieldNumber = 1,
    kPoVectFieldNumber = 2,
    kVAFieldNumber = 5,
    kXFieldNumber = 3,
    kIFieldNumber = 4,
  };
  // optional .Matrix_proto poMatrix = 1;
  bool has_pomatrix() const;
  private:
  bool _internal_has_pomatrix() const;
  public:
  void clear_pomatrix();
  const ::Matrix_proto& pomatrix() const;
  PROTOBUF_NODISCARD ::Matrix_proto* release_pomatrix();
  ::Matrix_proto* mutable_pomatrix();
  void set_allocated_pomatrix(::Matrix_proto* pomatrix);
  private:
  const ::Matrix_proto& _internal_pomatrix() const;
  ::Matrix_proto* _internal_mutable_pomatrix();
  public:
  void unsafe_arena_set_allocated_pomatrix(
      ::Matrix_proto* pomatrix);
  ::Matrix_proto* unsafe_arena_release_pomatrix();

  // optional .Vect_proto poVect = 2;
  bool has_povect() const;
  private:
  bool _internal_has_povect() const;
  public:
  void clear_povect();
  const ::Vect_proto& povect() const;
  PROTOBUF_NODISCARD ::Vect_proto* release_povect();
  ::Vect_proto* mutable_povect();
  void set_allocated_povect(::Vect_proto* povect);
  private:
  const ::Vect_proto& _internal_povect() const;
  ::Vect_proto* _internal_mutable_povect();
  public:
  void unsafe_arena_set_allocated_povect(
      ::Vect_proto* povect);
  ::Vect_proto* unsafe_arena_release_povect();

  // optional .Vect_proto vA = 5;
  bool has_va() const;
  private:
  bool _internal_has_va() const;
  public:
  void clear_va();
  const ::Vect_proto& va() const;
  PROTOBUF_NODISCARD ::Vect_proto* release_va();
  ::Vect_proto* mutable_va();
  void set_allocated_va(::Vect_proto* va);
  private:
  const ::Vect_proto& _internal_va() const;
  ::Vect_proto* _internal_mutable_va();
  public:
  void unsafe_arena_set_allocated_va(
      ::Vect_proto* va);
  ::Vect_proto* unsafe_arena_release_va();

  // optional float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional sint32 i = 4;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  int32_t i() const;
  void set_i(int32_t value);
  private:
  int32_t _internal_i() const;
  void _internal_set_i(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GameObject_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Matrix_proto* pomatrix_;
    ::Vect_proto* povect_;
    ::Vect_proto* va_;
    float x_;
    int32_t i_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameObject_proto

// optional .Matrix_proto poMatrix = 1;
inline bool GameObject_proto::_internal_has_pomatrix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pomatrix_ != nullptr);
  return value;
}
inline bool GameObject_proto::has_pomatrix() const {
  return _internal_has_pomatrix();
}
inline const ::Matrix_proto& GameObject_proto::_internal_pomatrix() const {
  const ::Matrix_proto* p = _impl_.pomatrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::Matrix_proto&>(
      ::_Matrix_proto_default_instance_);
}
inline const ::Matrix_proto& GameObject_proto::pomatrix() const {
  // @@protoc_insertion_point(field_get:GameObject_proto.poMatrix)
  return _internal_pomatrix();
}
inline void GameObject_proto::unsafe_arena_set_allocated_pomatrix(
    ::Matrix_proto* pomatrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pomatrix_);
  }
  _impl_.pomatrix_ = pomatrix;
  if (pomatrix) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameObject_proto.poMatrix)
}
inline ::Matrix_proto* GameObject_proto::release_pomatrix() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Matrix_proto* temp = _impl_.pomatrix_;
  _impl_.pomatrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Matrix_proto* GameObject_proto::unsafe_arena_release_pomatrix() {
  // @@protoc_insertion_point(field_release:GameObject_proto.poMatrix)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Matrix_proto* temp = _impl_.pomatrix_;
  _impl_.pomatrix_ = nullptr;
  return temp;
}
inline ::Matrix_proto* GameObject_proto::_internal_mutable_pomatrix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pomatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::Matrix_proto>(GetArenaForAllocation());
    _impl_.pomatrix_ = p;
  }
  return _impl_.pomatrix_;
}
inline ::Matrix_proto* GameObject_proto::mutable_pomatrix() {
  ::Matrix_proto* _msg = _internal_mutable_pomatrix();
  // @@protoc_insertion_point(field_mutable:GameObject_proto.poMatrix)
  return _msg;
}
inline void GameObject_proto::set_allocated_pomatrix(::Matrix_proto* pomatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pomatrix_);
  }
  if (pomatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pomatrix));
    if (message_arena != submessage_arena) {
      pomatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pomatrix, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pomatrix_ = pomatrix;
  // @@protoc_insertion_point(field_set_allocated:GameObject_proto.poMatrix)
}

// optional .Vect_proto poVect = 2;
inline bool GameObject_proto::_internal_has_povect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.povect_ != nullptr);
  return value;
}
inline bool GameObject_proto::has_povect() const {
  return _internal_has_povect();
}
inline const ::Vect_proto& GameObject_proto::_internal_povect() const {
  const ::Vect_proto* p = _impl_.povect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vect_proto&>(
      ::_Vect_proto_default_instance_);
}
inline const ::Vect_proto& GameObject_proto::povect() const {
  // @@protoc_insertion_point(field_get:GameObject_proto.poVect)
  return _internal_povect();
}
inline void GameObject_proto::unsafe_arena_set_allocated_povect(
    ::Vect_proto* povect) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.povect_);
  }
  _impl_.povect_ = povect;
  if (povect) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameObject_proto.poVect)
}
inline ::Vect_proto* GameObject_proto::release_povect() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vect_proto* temp = _impl_.povect_;
  _impl_.povect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vect_proto* GameObject_proto::unsafe_arena_release_povect() {
  // @@protoc_insertion_point(field_release:GameObject_proto.poVect)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vect_proto* temp = _impl_.povect_;
  _impl_.povect_ = nullptr;
  return temp;
}
inline ::Vect_proto* GameObject_proto::_internal_mutable_povect() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.povect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vect_proto>(GetArenaForAllocation());
    _impl_.povect_ = p;
  }
  return _impl_.povect_;
}
inline ::Vect_proto* GameObject_proto::mutable_povect() {
  ::Vect_proto* _msg = _internal_mutable_povect();
  // @@protoc_insertion_point(field_mutable:GameObject_proto.poVect)
  return _msg;
}
inline void GameObject_proto::set_allocated_povect(::Vect_proto* povect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.povect_);
  }
  if (povect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(povect));
    if (message_arena != submessage_arena) {
      povect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, povect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.povect_ = povect;
  // @@protoc_insertion_point(field_set_allocated:GameObject_proto.poVect)
}

// optional float x = 3;
inline bool GameObject_proto::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameObject_proto::has_x() const {
  return _internal_has_x();
}
inline void GameObject_proto::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameObject_proto::_internal_x() const {
  return _impl_.x_;
}
inline float GameObject_proto::x() const {
  // @@protoc_insertion_point(field_get:GameObject_proto.x)
  return _internal_x();
}
inline void GameObject_proto::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.x_ = value;
}
inline void GameObject_proto::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:GameObject_proto.x)
}

// optional sint32 i = 4;
inline bool GameObject_proto::_internal_has_i() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameObject_proto::has_i() const {
  return _internal_has_i();
}
inline void GameObject_proto::clear_i() {
  _impl_.i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t GameObject_proto::_internal_i() const {
  return _impl_.i_;
}
inline int32_t GameObject_proto::i() const {
  // @@protoc_insertion_point(field_get:GameObject_proto.i)
  return _internal_i();
}
inline void GameObject_proto::_internal_set_i(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.i_ = value;
}
inline void GameObject_proto::set_i(int32_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:GameObject_proto.i)
}

// optional .Vect_proto vA = 5;
inline bool GameObject_proto::_internal_has_va() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.va_ != nullptr);
  return value;
}
inline bool GameObject_proto::has_va() const {
  return _internal_has_va();
}
inline const ::Vect_proto& GameObject_proto::_internal_va() const {
  const ::Vect_proto* p = _impl_.va_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vect_proto&>(
      ::_Vect_proto_default_instance_);
}
inline const ::Vect_proto& GameObject_proto::va() const {
  // @@protoc_insertion_point(field_get:GameObject_proto.vA)
  return _internal_va();
}
inline void GameObject_proto::unsafe_arena_set_allocated_va(
    ::Vect_proto* va) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.va_);
  }
  _impl_.va_ = va;
  if (va) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameObject_proto.vA)
}
inline ::Vect_proto* GameObject_proto::release_va() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vect_proto* temp = _impl_.va_;
  _impl_.va_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vect_proto* GameObject_proto::unsafe_arena_release_va() {
  // @@protoc_insertion_point(field_release:GameObject_proto.vA)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vect_proto* temp = _impl_.va_;
  _impl_.va_ = nullptr;
  return temp;
}
inline ::Vect_proto* GameObject_proto::_internal_mutable_va() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.va_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vect_proto>(GetArenaForAllocation());
    _impl_.va_ = p;
  }
  return _impl_.va_;
}
inline ::Vect_proto* GameObject_proto::mutable_va() {
  ::Vect_proto* _msg = _internal_mutable_va();
  // @@protoc_insertion_point(field_mutable:GameObject_proto.vA)
  return _msg;
}
inline void GameObject_proto::set_allocated_va(::Vect_proto* va) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.va_);
  }
  if (va) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(va));
    if (message_arena != submessage_arena) {
      va = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, va, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.va_ = va;
  // @@protoc_insertion_point(field_set_allocated:GameObject_proto.vA)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto
