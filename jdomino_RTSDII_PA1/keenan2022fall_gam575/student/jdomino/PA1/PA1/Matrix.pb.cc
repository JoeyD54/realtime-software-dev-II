// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Matrix.proto

#include "Matrix.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Matrix_proto::Matrix_proto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m0_)*/0
  , /*decltype(_impl_.m1_)*/0
  , /*decltype(_impl_.m2_)*/0
  , /*decltype(_impl_.m3_)*/0
  , /*decltype(_impl_.m4_)*/0
  , /*decltype(_impl_.m5_)*/0
  , /*decltype(_impl_.m6_)*/0
  , /*decltype(_impl_.m7_)*/0
  , /*decltype(_impl_.m8_)*/0
  , /*decltype(_impl_.m9_)*/0
  , /*decltype(_impl_.m10_)*/0
  , /*decltype(_impl_.m11_)*/0
  , /*decltype(_impl_.m12_)*/0
  , /*decltype(_impl_.m13_)*/0
  , /*decltype(_impl_.m14_)*/0
  , /*decltype(_impl_.m15_)*/0} {}
struct Matrix_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix_protoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix_protoDefaultTypeInternal() {}
  union {
    Matrix_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix_protoDefaultTypeInternal _Matrix_proto_default_instance_;

// ===================================================================

class Matrix_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<Matrix_proto>()._impl_._has_bits_);
  static void set_has_m0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_m6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_m7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_m8(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_m9(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_m10(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_m11(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_m12(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_m13(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_m14(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_m15(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

Matrix_proto::Matrix_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Matrix_proto)
}
Matrix_proto::Matrix_proto(const Matrix_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Matrix_proto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m0_){}
    , decltype(_impl_.m1_){}
    , decltype(_impl_.m2_){}
    , decltype(_impl_.m3_){}
    , decltype(_impl_.m4_){}
    , decltype(_impl_.m5_){}
    , decltype(_impl_.m6_){}
    , decltype(_impl_.m7_){}
    , decltype(_impl_.m8_){}
    , decltype(_impl_.m9_){}
    , decltype(_impl_.m10_){}
    , decltype(_impl_.m11_){}
    , decltype(_impl_.m12_){}
    , decltype(_impl_.m13_){}
    , decltype(_impl_.m14_){}
    , decltype(_impl_.m15_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.m0_, &from._impl_.m0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m15_) -
    reinterpret_cast<char*>(&_impl_.m0_)) + sizeof(_impl_.m15_));
  // @@protoc_insertion_point(copy_constructor:Matrix_proto)
}

inline void Matrix_proto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m0_){0}
    , decltype(_impl_.m1_){0}
    , decltype(_impl_.m2_){0}
    , decltype(_impl_.m3_){0}
    , decltype(_impl_.m4_){0}
    , decltype(_impl_.m5_){0}
    , decltype(_impl_.m6_){0}
    , decltype(_impl_.m7_){0}
    , decltype(_impl_.m8_){0}
    , decltype(_impl_.m9_){0}
    , decltype(_impl_.m10_){0}
    , decltype(_impl_.m11_){0}
    , decltype(_impl_.m12_){0}
    , decltype(_impl_.m13_){0}
    , decltype(_impl_.m14_){0}
    , decltype(_impl_.m15_){0}
  };
}

Matrix_proto::~Matrix_proto() {
  // @@protoc_insertion_point(destructor:Matrix_proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:Matrix_proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.m0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m7_) -
        reinterpret_cast<char*>(&_impl_.m0_)) + sizeof(_impl_.m7_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.m8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m15_) -
        reinterpret_cast<char*>(&_impl_.m8_)) + sizeof(_impl_.m15_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Matrix_proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float m0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_m0(&has_bits);
          _impl_.m0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_m1(&has_bits);
          _impl_.m1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_m2(&has_bits);
          _impl_.m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_m3(&has_bits);
          _impl_.m3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_m4(&has_bits);
          _impl_.m4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_m5(&has_bits);
          _impl_.m5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_m6(&has_bits);
          _impl_.m6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_m7(&has_bits);
          _impl_.m7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_m8(&has_bits);
          _impl_.m8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_m9(&has_bits);
          _impl_.m9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m10 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_m10(&has_bits);
          _impl_.m10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m11 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_m11(&has_bits);
          _impl_.m11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m12 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_m12(&has_bits);
          _impl_.m12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m13 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_m13(&has_bits);
          _impl_.m13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m14 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_m14(&has_bits);
          _impl_.m14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m15 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_m15(&has_bits);
          _impl_.m15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix_proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Matrix_proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float m0 = 1;
  if (_internal_has_m0()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_m0(), target);
  }

  // optional float m1 = 2;
  if (_internal_has_m1()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_m1(), target);
  }

  // optional float m2 = 3;
  if (_internal_has_m2()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_m2(), target);
  }

  // optional float m3 = 4;
  if (_internal_has_m3()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_m3(), target);
  }

  // optional float m4 = 5;
  if (_internal_has_m4()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_m4(), target);
  }

  // optional float m5 = 6;
  if (_internal_has_m5()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_m5(), target);
  }

  // optional float m6 = 7;
  if (_internal_has_m6()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_m6(), target);
  }

  // optional float m7 = 8;
  if (_internal_has_m7()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_m7(), target);
  }

  // optional float m8 = 9;
  if (_internal_has_m8()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_m8(), target);
  }

  // optional float m9 = 10;
  if (_internal_has_m9()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_m9(), target);
  }

  // optional float m10 = 11;
  if (_internal_has_m10()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_m10(), target);
  }

  // optional float m11 = 12;
  if (_internal_has_m11()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_m11(), target);
  }

  // optional float m12 = 13;
  if (_internal_has_m12()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_m12(), target);
  }

  // optional float m13 = 14;
  if (_internal_has_m13()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_m13(), target);
  }

  // optional float m14 = 15;
  if (_internal_has_m14()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_m14(), target);
  }

  // optional float m15 = 16;
  if (_internal_has_m15()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_m15(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Matrix_proto)
  return target;
}

size_t Matrix_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Matrix_proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float m0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float m1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float m2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float m3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float m4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float m5 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float m6 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float m7 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float m8 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float m9 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float m10 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float m11 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float m12 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float m13 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float m14 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float m15 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Matrix_proto*>(
      &from));
}

void Matrix_proto::MergeFrom(const Matrix_proto& from) {
  Matrix_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Matrix_proto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m0_ = from._impl_.m0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m1_ = from._impl_.m1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m2_ = from._impl_.m2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m3_ = from._impl_.m3_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.m4_ = from._impl_.m4_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.m5_ = from._impl_.m5_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.m6_ = from._impl_.m6_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.m7_ = from._impl_.m7_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.m8_ = from._impl_.m8_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.m9_ = from._impl_.m9_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.m10_ = from._impl_.m10_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.m11_ = from._impl_.m11_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.m12_ = from._impl_.m12_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.m13_ = from._impl_.m13_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.m14_ = from._impl_.m14_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.m15_ = from._impl_.m15_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Matrix_proto::CopyFrom(const Matrix_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Matrix_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix_proto::IsInitialized() const {
  return true;
}

void Matrix_proto::InternalSwap(Matrix_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix_proto, _impl_.m15_)
      + sizeof(Matrix_proto::_impl_.m15_)
      - PROTOBUF_FIELD_OFFSET(Matrix_proto, _impl_.m0_)>(
          reinterpret_cast<char*>(&_impl_.m0_),
          reinterpret_cast<char*>(&other->_impl_.m0_));
}

std::string Matrix_proto::GetTypeName() const {
  return "Matrix_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Matrix_proto*
Arena::CreateMaybeMessage< ::Matrix_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Matrix_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
