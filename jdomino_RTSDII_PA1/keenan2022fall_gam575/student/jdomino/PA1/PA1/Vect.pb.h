// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Vect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Vect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Vect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Vect_2eproto {
  static const uint32_t offsets[];
};
class Vect_proto;
struct Vect_protoDefaultTypeInternal;
extern Vect_protoDefaultTypeInternal _Vect_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Vect_proto* Arena::CreateMaybeMessage<::Vect_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vect_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Vect_proto) */ {
 public:
  inline Vect_proto() : Vect_proto(nullptr) {}
  ~Vect_proto() override;
  explicit PROTOBUF_CONSTEXPR Vect_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vect_proto(const Vect_proto& from);
  Vect_proto(Vect_proto&& from) noexcept
    : Vect_proto() {
    *this = ::std::move(from);
  }

  inline Vect_proto& operator=(const Vect_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vect_proto& operator=(Vect_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vect_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vect_proto* internal_default_instance() {
    return reinterpret_cast<const Vect_proto*>(
               &_Vect_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vect_proto& a, Vect_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Vect_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vect_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vect_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vect_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Vect_proto& from);
  void MergeFrom(const Vect_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vect_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vect_proto";
  }
  protected:
  explicit Vect_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vect_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
    float w_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Vect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vect_proto

// optional float x = 1;
inline bool Vect_proto::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vect_proto::has_x() const {
  return _internal_has_x();
}
inline void Vect_proto::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Vect_proto::_internal_x() const {
  return _impl_.x_;
}
inline float Vect_proto::x() const {
  // @@protoc_insertion_point(field_get:Vect_proto.x)
  return _internal_x();
}
inline void Vect_proto::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Vect_proto::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vect_proto.x)
}

// optional float y = 2;
inline bool Vect_proto::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vect_proto::has_y() const {
  return _internal_has_y();
}
inline void Vect_proto::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Vect_proto::_internal_y() const {
  return _impl_.y_;
}
inline float Vect_proto::y() const {
  // @@protoc_insertion_point(field_get:Vect_proto.y)
  return _internal_y();
}
inline void Vect_proto::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Vect_proto::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vect_proto.y)
}

// optional float z = 3;
inline bool Vect_proto::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vect_proto::has_z() const {
  return _internal_has_z();
}
inline void Vect_proto::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Vect_proto::_internal_z() const {
  return _impl_.z_;
}
inline float Vect_proto::z() const {
  // @@protoc_insertion_point(field_get:Vect_proto.z)
  return _internal_z();
}
inline void Vect_proto::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Vect_proto::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vect_proto.z)
}

// optional float w = 4;
inline bool Vect_proto::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vect_proto::has_w() const {
  return _internal_has_w();
}
inline void Vect_proto::clear_w() {
  _impl_.w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Vect_proto::_internal_w() const {
  return _impl_.w_;
}
inline float Vect_proto::w() const {
  // @@protoc_insertion_point(field_get:Vect_proto.w)
  return _internal_w();
}
inline void Vect_proto::_internal_set_w(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.w_ = value;
}
inline void Vect_proto::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Vect_proto.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Vect_2eproto
