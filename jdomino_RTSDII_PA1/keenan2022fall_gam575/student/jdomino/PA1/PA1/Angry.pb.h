// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Angry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Angry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Angry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Angry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Angry_2eproto {
  static const uint32_t offsets[];
};
class Angry_proto;
struct Angry_protoDefaultTypeInternal;
extern Angry_protoDefaultTypeInternal _Angry_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Angry_proto* Arena::CreateMaybeMessage<::Angry_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Angry_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Angry_proto) */ {
 public:
  inline Angry_proto() : Angry_proto(nullptr) {}
  ~Angry_proto() override;
  explicit PROTOBUF_CONSTEXPR Angry_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Angry_proto(const Angry_proto& from);
  Angry_proto(Angry_proto&& from) noexcept
    : Angry_proto() {
    *this = ::std::move(from);
  }

  inline Angry_proto& operator=(const Angry_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Angry_proto& operator=(Angry_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Angry_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Angry_proto* internal_default_instance() {
    return reinterpret_cast<const Angry_proto*>(
               &_Angry_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Angry_proto& a, Angry_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Angry_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Angry_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Angry_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Angry_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Angry_proto& from);
  void MergeFrom(const Angry_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Angry_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Angry_proto";
  }
  protected:
  explicit Angry_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated sint32 arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  int32_t _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_arr() const;
  void _internal_add_arr(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_arr();
  public:
  int32_t arr(int index) const;
  void set_arr(int index, int32_t value);
  void add_arr(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_arr();

  // optional float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:Angry_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > arr_;
    mutable std::atomic<int> _arr_cached_byte_size_;
    float value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Angry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Angry_proto

// repeated sint32 arr = 1;
inline int Angry_proto::_internal_arr_size() const {
  return _impl_.arr_.size();
}
inline int Angry_proto::arr_size() const {
  return _internal_arr_size();
}
inline void Angry_proto::clear_arr() {
  _impl_.arr_.Clear();
}
inline int32_t Angry_proto::_internal_arr(int index) const {
  return _impl_.arr_.Get(index);
}
inline int32_t Angry_proto::arr(int index) const {
  // @@protoc_insertion_point(field_get:Angry_proto.arr)
  return _internal_arr(index);
}
inline void Angry_proto::set_arr(int index, int32_t value) {
  _impl_.arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:Angry_proto.arr)
}
inline void Angry_proto::_internal_add_arr(int32_t value) {
  _impl_.arr_.Add(value);
}
inline void Angry_proto::add_arr(int32_t value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:Angry_proto.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Angry_proto::_internal_arr() const {
  return _impl_.arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Angry_proto::arr() const {
  // @@protoc_insertion_point(field_list:Angry_proto.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Angry_proto::_internal_mutable_arr() {
  return &_impl_.arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Angry_proto::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:Angry_proto.arr)
  return _internal_mutable_arr();
}

// optional float value = 2;
inline bool Angry_proto::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Angry_proto::has_value() const {
  return _internal_has_value();
}
inline void Angry_proto::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Angry_proto::_internal_value() const {
  return _impl_.value_;
}
inline float Angry_proto::value() const {
  // @@protoc_insertion_point(field_get:Angry_proto.value)
  return _internal_value();
}
inline void Angry_proto::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}
inline void Angry_proto::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Angry_proto.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Angry_2eproto
