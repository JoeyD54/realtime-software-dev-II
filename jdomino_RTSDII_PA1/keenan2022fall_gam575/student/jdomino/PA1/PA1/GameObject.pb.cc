// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameObject.proto

#include "GameObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GameObject_proto::GameObject_proto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pomatrix_)*/nullptr
  , /*decltype(_impl_.povect_)*/nullptr
  , /*decltype(_impl_.va_)*/nullptr
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.i_)*/0} {}
struct GameObject_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameObject_protoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameObject_protoDefaultTypeInternal() {}
  union {
    GameObject_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameObject_protoDefaultTypeInternal _GameObject_proto_default_instance_;

// ===================================================================

class GameObject_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<GameObject_proto>()._impl_._has_bits_);
  static const ::Matrix_proto& pomatrix(const GameObject_proto* msg);
  static void set_has_pomatrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vect_proto& povect(const GameObject_proto* msg);
  static void set_has_povect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vect_proto& va(const GameObject_proto* msg);
  static void set_has_va(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Matrix_proto&
GameObject_proto::_Internal::pomatrix(const GameObject_proto* msg) {
  return *msg->_impl_.pomatrix_;
}
const ::Vect_proto&
GameObject_proto::_Internal::povect(const GameObject_proto* msg) {
  return *msg->_impl_.povect_;
}
const ::Vect_proto&
GameObject_proto::_Internal::va(const GameObject_proto* msg) {
  return *msg->_impl_.va_;
}
void GameObject_proto::clear_pomatrix() {
  if (_impl_.pomatrix_ != nullptr) _impl_.pomatrix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameObject_proto::clear_povect() {
  if (_impl_.povect_ != nullptr) _impl_.povect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GameObject_proto::clear_va() {
  if (_impl_.va_ != nullptr) _impl_.va_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GameObject_proto::GameObject_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameObject_proto)
}
GameObject_proto::GameObject_proto(const GameObject_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GameObject_proto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pomatrix_){nullptr}
    , decltype(_impl_.povect_){nullptr}
    , decltype(_impl_.va_){nullptr}
    , decltype(_impl_.x_){}
    , decltype(_impl_.i_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_pomatrix()) {
    _this->_impl_.pomatrix_ = new ::Matrix_proto(*from._impl_.pomatrix_);
  }
  if (from._internal_has_povect()) {
    _this->_impl_.povect_ = new ::Vect_proto(*from._impl_.povect_);
  }
  if (from._internal_has_va()) {
    _this->_impl_.va_ = new ::Vect_proto(*from._impl_.va_);
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.i_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.i_));
  // @@protoc_insertion_point(copy_constructor:GameObject_proto)
}

inline void GameObject_proto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pomatrix_){nullptr}
    , decltype(_impl_.povect_){nullptr}
    , decltype(_impl_.va_){nullptr}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.i_){0}
  };
}

GameObject_proto::~GameObject_proto() {
  // @@protoc_insertion_point(destructor:GameObject_proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameObject_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pomatrix_;
  if (this != internal_default_instance()) delete _impl_.povect_;
  if (this != internal_default_instance()) delete _impl_.va_;
}

void GameObject_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameObject_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:GameObject_proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pomatrix_ != nullptr);
      _impl_.pomatrix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.povect_ != nullptr);
      _impl_.povect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.va_ != nullptr);
      _impl_.va_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.i_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.i_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameObject_proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Matrix_proto poMatrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pomatrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vect_proto poVect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_povect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 i = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_i(&has_bits);
          _impl_.i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vect_proto vA = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_va(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameObject_proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameObject_proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .Matrix_proto poMatrix = 1;
  if (_internal_has_pomatrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pomatrix(this),
        _Internal::pomatrix(this).GetCachedSize(), target, stream);
  }

  // optional .Vect_proto poVect = 2;
  if (_internal_has_povect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::povect(this),
        _Internal::povect(this).GetCachedSize(), target, stream);
  }

  // optional float x = 3;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // optional sint32 i = 4;
  if (_internal_has_i()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_i(), target);
  }

  // optional .Vect_proto vA = 5;
  if (_internal_has_va()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::va(this),
        _Internal::va(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameObject_proto)
  return target;
}

size_t GameObject_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameObject_proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Matrix_proto poMatrix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pomatrix_);
    }

    // optional .Vect_proto poVect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.povect_);
    }

    // optional .Vect_proto vA = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.va_);
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional sint32 i = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_i());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameObject_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GameObject_proto*>(
      &from));
}

void GameObject_proto::MergeFrom(const GameObject_proto& from) {
  GameObject_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GameObject_proto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pomatrix()->::Matrix_proto::MergeFrom(
          from._internal_pomatrix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_povect()->::Vect_proto::MergeFrom(
          from._internal_povect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_va()->::Vect_proto::MergeFrom(
          from._internal_va());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.i_ = from._impl_.i_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GameObject_proto::CopyFrom(const GameObject_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameObject_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameObject_proto::IsInitialized() const {
  return true;
}

void GameObject_proto::InternalSwap(GameObject_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.i_)
      + sizeof(GameObject_proto::_impl_.i_)
      - PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.pomatrix_)>(
          reinterpret_cast<char*>(&_impl_.pomatrix_),
          reinterpret_cast<char*>(&other->_impl_.pomatrix_));
}

std::string GameObject_proto::GetTypeName() const {
  return "GameObject_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameObject_proto*
Arena::CreateMaybeMessage< ::GameObject_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameObject_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
