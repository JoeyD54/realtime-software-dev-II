// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Material.proto

#include "Material.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Material_proto::Material_proto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.c_)*/0} {}
struct Material_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Material_protoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Material_protoDefaultTypeInternal() {}
  union {
    Material_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Material_protoDefaultTypeInternal _Material_proto_default_instance_;
bool Material_proto_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Material_proto_Color_strings[4] = {};

static const char Material_proto_Color_names[] =
  "Blue"
  "Red"
  "White"
  "Yellow";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Material_proto_Color_entries[] = {
  { {Material_proto_Color_names + 0, 4}, 0 },
  { {Material_proto_Color_names + 4, 3}, 2 },
  { {Material_proto_Color_names + 7, 5}, 1 },
  { {Material_proto_Color_names + 12, 6}, 3 },
};

static const int Material_proto_Color_entries_by_number[] = {
  0, // 0 -> Blue
  2, // 1 -> White
  1, // 2 -> Red
  3, // 3 -> Yellow
};

const std::string& Material_proto_Color_Name(
    Material_proto_Color value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Material_proto_Color_entries,
          Material_proto_Color_entries_by_number,
          4, Material_proto_Color_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Material_proto_Color_entries,
      Material_proto_Color_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Material_proto_Color_strings[idx].get();
}
bool Material_proto_Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Material_proto_Color* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Material_proto_Color_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Material_proto_Color>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Material_proto_Color Material_proto::Blue;
constexpr Material_proto_Color Material_proto::White;
constexpr Material_proto_Color Material_proto::Red;
constexpr Material_proto_Color Material_proto::Yellow;
constexpr Material_proto_Color Material_proto::Color_MIN;
constexpr Material_proto_Color Material_proto::Color_MAX;
constexpr int Material_proto::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Material_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<Material_proto>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Material_proto::Material_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Material_proto)
}
Material_proto::Material_proto(const Material_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Material_proto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.c_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.c_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.c_));
  // @@protoc_insertion_point(copy_constructor:Material_proto)
}

inline void Material_proto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.c_){0}
  };
}

Material_proto::~Material_proto() {
  // @@protoc_insertion_point(destructor:Material_proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Material_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Material_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Material_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:Material_proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.c_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.c_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Material_proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Material_proto.Color a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_a(static_cast<::Material_proto_Color>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .Material_proto.Color b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_b(static_cast<::Material_proto_Color>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .Material_proto.Color c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_c(static_cast<::Material_proto_Color>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Material_proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Material_proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional sint32 x = 1;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // optional .Material_proto.Color a = 2;
  if (_internal_has_a()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_a(), target);
  }

  // optional .Material_proto.Color b = 3;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_b(), target);
  }

  // optional .Material_proto.Color c = 4;
  if (_internal_has_c()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Material_proto)
  return target;
}

size_t Material_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Material_proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional sint32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_x());
    }

    // optional .Material_proto.Color a = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_a());
    }

    // optional .Material_proto.Color b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_b());
    }

    // optional .Material_proto.Color c = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_c());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Material_proto*>(
      &from));
}

void Material_proto::MergeFrom(const Material_proto& from) {
  Material_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Material_proto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.c_ = from._impl_.c_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Material_proto::CopyFrom(const Material_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Material_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material_proto::IsInitialized() const {
  return true;
}

void Material_proto::InternalSwap(Material_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Material_proto, _impl_.c_)
      + sizeof(Material_proto::_impl_.c_)
      - PROTOBUF_FIELD_OFFSET(Material_proto, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string Material_proto::GetTypeName() const {
  return "Material_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Material_proto*
Arena::CreateMaybeMessage< ::Material_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Material_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
