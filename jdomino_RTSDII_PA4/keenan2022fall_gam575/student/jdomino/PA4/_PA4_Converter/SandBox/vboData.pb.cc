// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vboData.proto

#include "vboData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR vboData_proto::vboData_proto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.podata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targettype_)*/0
  , /*decltype(_impl_.componenttype_)*/0
  , /*decltype(_impl_.vbotype_)*/0
  , /*decltype(_impl_.attribindex_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.datasize_)*/0u} {}
struct vboData_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR vboData_protoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~vboData_protoDefaultTypeInternal() {}
  union {
    vboData_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 vboData_protoDefaultTypeInternal _vboData_proto_default_instance_;
bool vboData_proto_VBO_TARGET_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vboData_proto_VBO_TARGET_strings[2] = {};

static const char vboData_proto_VBO_TARGET_names[] =
  "ARRAY_BUFFER"
  "ELEMENT_ARRAY_BUFFER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vboData_proto_VBO_TARGET_entries[] = {
  { {vboData_proto_VBO_TARGET_names + 0, 12}, 0 },
  { {vboData_proto_VBO_TARGET_names + 12, 20}, 1 },
};

static const int vboData_proto_VBO_TARGET_entries_by_number[] = {
  0, // 0 -> ARRAY_BUFFER
  1, // 1 -> ELEMENT_ARRAY_BUFFER
};

const std::string& vboData_proto_VBO_TARGET_Name(
    vboData_proto_VBO_TARGET value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vboData_proto_VBO_TARGET_entries,
          vboData_proto_VBO_TARGET_entries_by_number,
          2, vboData_proto_VBO_TARGET_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vboData_proto_VBO_TARGET_entries,
      vboData_proto_VBO_TARGET_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vboData_proto_VBO_TARGET_strings[idx].get();
}
bool vboData_proto_VBO_TARGET_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_TARGET* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vboData_proto_VBO_TARGET_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<vboData_proto_VBO_TARGET>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr vboData_proto_VBO_TARGET vboData_proto::ARRAY_BUFFER;
constexpr vboData_proto_VBO_TARGET vboData_proto::ELEMENT_ARRAY_BUFFER;
constexpr vboData_proto_VBO_TARGET vboData_proto::VBO_TARGET_MIN;
constexpr vboData_proto_VBO_TARGET vboData_proto::VBO_TARGET_MAX;
constexpr int vboData_proto::VBO_TARGET_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool vboData_proto_VBO_COMPONENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vboData_proto_VBO_COMPONENT_strings[8] = {};

static const char vboData_proto_VBO_COMPONENT_names[] =
  "BYTE"
  "DOUBLE"
  "FLOAT"
  "INT"
  "SHORT"
  "UNSIGNED_BYTE"
  "UNSIGNED_INT"
  "UNSIGNED_SHORT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vboData_proto_VBO_COMPONENT_entries[] = {
  { {vboData_proto_VBO_COMPONENT_names + 0, 4}, 0 },
  { {vboData_proto_VBO_COMPONENT_names + 4, 6}, 7 },
  { {vboData_proto_VBO_COMPONENT_names + 10, 5}, 6 },
  { {vboData_proto_VBO_COMPONENT_names + 15, 3}, 4 },
  { {vboData_proto_VBO_COMPONENT_names + 18, 5}, 2 },
  { {vboData_proto_VBO_COMPONENT_names + 23, 13}, 1 },
  { {vboData_proto_VBO_COMPONENT_names + 36, 12}, 5 },
  { {vboData_proto_VBO_COMPONENT_names + 48, 14}, 3 },
};

static const int vboData_proto_VBO_COMPONENT_entries_by_number[] = {
  0, // 0 -> BYTE
  5, // 1 -> UNSIGNED_BYTE
  4, // 2 -> SHORT
  7, // 3 -> UNSIGNED_SHORT
  3, // 4 -> INT
  6, // 5 -> UNSIGNED_INT
  2, // 6 -> FLOAT
  1, // 7 -> DOUBLE
};

const std::string& vboData_proto_VBO_COMPONENT_Name(
    vboData_proto_VBO_COMPONENT value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vboData_proto_VBO_COMPONENT_entries,
          vboData_proto_VBO_COMPONENT_entries_by_number,
          8, vboData_proto_VBO_COMPONENT_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vboData_proto_VBO_COMPONENT_entries,
      vboData_proto_VBO_COMPONENT_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vboData_proto_VBO_COMPONENT_strings[idx].get();
}
bool vboData_proto_VBO_COMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_COMPONENT* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vboData_proto_VBO_COMPONENT_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<vboData_proto_VBO_COMPONENT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr vboData_proto_VBO_COMPONENT vboData_proto::BYTE;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::UNSIGNED_BYTE;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::SHORT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::UNSIGNED_SHORT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::INT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::UNSIGNED_INT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::FLOAT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::DOUBLE;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::VBO_COMPONENT_MIN;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::VBO_COMPONENT_MAX;
constexpr int vboData_proto::VBO_COMPONENT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool vboData_proto_VBO_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vboData_proto_VBO_TYPE_strings[9] = {};

static const char vboData_proto_VBO_TYPE_names[] =
  "MAT2"
  "MAT3"
  "MAT4"
  "MATRIX"
  "SCALAR"
  "VEC2"
  "VEC3"
  "VEC4"
  "VECTOR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vboData_proto_VBO_TYPE_entries[] = {
  { {vboData_proto_VBO_TYPE_names + 0, 4}, 3 },
  { {vboData_proto_VBO_TYPE_names + 4, 4}, 4 },
  { {vboData_proto_VBO_TYPE_names + 8, 4}, 5 },
  { {vboData_proto_VBO_TYPE_names + 12, 6}, 8 },
  { {vboData_proto_VBO_TYPE_names + 18, 6}, 6 },
  { {vboData_proto_VBO_TYPE_names + 24, 4}, 0 },
  { {vboData_proto_VBO_TYPE_names + 28, 4}, 1 },
  { {vboData_proto_VBO_TYPE_names + 32, 4}, 2 },
  { {vboData_proto_VBO_TYPE_names + 36, 6}, 7 },
};

static const int vboData_proto_VBO_TYPE_entries_by_number[] = {
  5, // 0 -> VEC2
  6, // 1 -> VEC3
  7, // 2 -> VEC4
  0, // 3 -> MAT2
  1, // 4 -> MAT3
  2, // 5 -> MAT4
  4, // 6 -> SCALAR
  8, // 7 -> VECTOR
  3, // 8 -> MATRIX
};

const std::string& vboData_proto_VBO_TYPE_Name(
    vboData_proto_VBO_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vboData_proto_VBO_TYPE_entries,
          vboData_proto_VBO_TYPE_entries_by_number,
          9, vboData_proto_VBO_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vboData_proto_VBO_TYPE_entries,
      vboData_proto_VBO_TYPE_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vboData_proto_VBO_TYPE_strings[idx].get();
}
bool vboData_proto_VBO_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vboData_proto_VBO_TYPE_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<vboData_proto_VBO_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr vboData_proto_VBO_TYPE vboData_proto::VEC2;
constexpr vboData_proto_VBO_TYPE vboData_proto::VEC3;
constexpr vboData_proto_VBO_TYPE vboData_proto::VEC4;
constexpr vboData_proto_VBO_TYPE vboData_proto::MAT2;
constexpr vboData_proto_VBO_TYPE vboData_proto::MAT3;
constexpr vboData_proto_VBO_TYPE vboData_proto::MAT4;
constexpr vboData_proto_VBO_TYPE vboData_proto::SCALAR;
constexpr vboData_proto_VBO_TYPE vboData_proto::VECTOR;
constexpr vboData_proto_VBO_TYPE vboData_proto::MATRIX;
constexpr vboData_proto_VBO_TYPE vboData_proto::VBO_TYPE_MIN;
constexpr vboData_proto_VBO_TYPE vboData_proto::VBO_TYPE_MAX;
constexpr int vboData_proto::VBO_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class vboData_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<vboData_proto>()._impl_._has_bits_);
  static void set_has_targettype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_componenttype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vbotype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attribindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_datasize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_podata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

vboData_proto::vboData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vboData_proto)
}
vboData_proto::vboData_proto(const vboData_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  vboData_proto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.podata_){}
    , decltype(_impl_.targettype_){}
    , decltype(_impl_.componenttype_){}
    , decltype(_impl_.vbotype_){}
    , decltype(_impl_.attribindex_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.datasize_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.podata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.podata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_podata()) {
    _this->_impl_.podata_.Set(from._internal_podata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.targettype_, &from._impl_.targettype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datasize_) -
    reinterpret_cast<char*>(&_impl_.targettype_)) + sizeof(_impl_.datasize_));
  // @@protoc_insertion_point(copy_constructor:vboData_proto)
}

inline void vboData_proto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.podata_){}
    , decltype(_impl_.targettype_){0}
    , decltype(_impl_.componenttype_){0}
    , decltype(_impl_.vbotype_){0}
    , decltype(_impl_.attribindex_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.datasize_){0u}
  };
  _impl_.podata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.podata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

vboData_proto::~vboData_proto() {
  // @@protoc_insertion_point(destructor:vboData_proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void vboData_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.podata_.Destroy();
}

void vboData_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void vboData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:vboData_proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.podata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.targettype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.datasize_) -
        reinterpret_cast<char*>(&_impl_.targettype_)) + sizeof(_impl_.datasize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* vboData_proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .vboData_proto.VBO_TARGET targetType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_targettype(static_cast<::vboData_proto_VBO_TARGET>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .vboData_proto.VBO_COMPONENT componentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_componenttype(static_cast<::vboData_proto_VBO_COMPONENT>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .vboData_proto.VBO_TYPE vboType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vbotype(static_cast<::vboData_proto_VBO_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attribIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_attribindex(&has_bits);
          _impl_.attribindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dataSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_datasize(&has_bits);
          _impl_.datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes poData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_podata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* vboData_proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vboData_proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .vboData_proto.VBO_TARGET targetType = 1;
  if (_internal_has_targettype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_targettype(), target);
  }

  // optional .vboData_proto.VBO_COMPONENT componentType = 2;
  if (_internal_has_componenttype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_componenttype(), target);
  }

  // optional .vboData_proto.VBO_TYPE vboType = 3;
  if (_internal_has_vbotype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vbotype(), target);
  }

  // optional uint32 attribIndex = 4;
  if (_internal_has_attribindex()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_attribindex(), target);
  }

  // optional uint32 count = 5;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_count(), target);
  }

  // optional uint32 dataSize = 6;
  if (_internal_has_datasize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_datasize(), target);
  }

  // optional bytes poData = 7;
  if (_internal_has_podata()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_podata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vboData_proto)
  return target;
}

size_t vboData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vboData_proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes poData = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_podata());
    }

    // optional .vboData_proto.VBO_TARGET targetType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_targettype());
    }

    // optional .vboData_proto.VBO_COMPONENT componentType = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_componenttype());
    }

    // optional .vboData_proto.VBO_TYPE vboType = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vbotype());
    }

    // optional uint32 attribIndex = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribindex());
    }

    // optional uint32 count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

    // optional uint32 dataSize = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datasize());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vboData_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const vboData_proto*>(
      &from));
}

void vboData_proto::MergeFrom(const vboData_proto& from) {
  vboData_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:vboData_proto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_podata(from._internal_podata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.targettype_ = from._impl_.targettype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.componenttype_ = from._impl_.componenttype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vbotype_ = from._impl_.vbotype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.attribindex_ = from._impl_.attribindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.datasize_ = from._impl_.datasize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void vboData_proto::CopyFrom(const vboData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vboData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vboData_proto::IsInitialized() const {
  return true;
}

void vboData_proto::InternalSwap(vboData_proto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.podata_, lhs_arena,
      &other->_impl_.podata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(vboData_proto, _impl_.datasize_)
      + sizeof(vboData_proto::_impl_.datasize_)
      - PROTOBUF_FIELD_OFFSET(vboData_proto, _impl_.targettype_)>(
          reinterpret_cast<char*>(&_impl_.targettype_),
          reinterpret_cast<char*>(&other->_impl_.targettype_));
}

std::string vboData_proto::GetTypeName() const {
  return "vboData_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vboData_proto*
Arena::CreateMaybeMessage< ::vboData_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vboData_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
