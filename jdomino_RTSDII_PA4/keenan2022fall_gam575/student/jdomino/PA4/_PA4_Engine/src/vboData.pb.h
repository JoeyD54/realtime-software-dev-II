// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vboData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vboData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vboData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vboData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vboData_2eproto {
  static const uint32_t offsets[];
};
class vboData_proto;
struct vboData_protoDefaultTypeInternal;
extern vboData_protoDefaultTypeInternal _vboData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::vboData_proto* Arena::CreateMaybeMessage<::vboData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum vboData_proto_VBO_TARGET : int {
  vboData_proto_VBO_TARGET_ARRAY_BUFFER = 0,
  vboData_proto_VBO_TARGET_ELEMENT_ARRAY_BUFFER = 1,
  vboData_proto_VBO_TARGET_vboData_proto_VBO_TARGET_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  vboData_proto_VBO_TARGET_vboData_proto_VBO_TARGET_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool vboData_proto_VBO_TARGET_IsValid(int value);
constexpr vboData_proto_VBO_TARGET vboData_proto_VBO_TARGET_VBO_TARGET_MIN = vboData_proto_VBO_TARGET_ARRAY_BUFFER;
constexpr vboData_proto_VBO_TARGET vboData_proto_VBO_TARGET_VBO_TARGET_MAX = vboData_proto_VBO_TARGET_ELEMENT_ARRAY_BUFFER;
constexpr int vboData_proto_VBO_TARGET_VBO_TARGET_ARRAYSIZE = vboData_proto_VBO_TARGET_VBO_TARGET_MAX + 1;

const std::string& vboData_proto_VBO_TARGET_Name(vboData_proto_VBO_TARGET value);
template<typename T>
inline const std::string& vboData_proto_VBO_TARGET_Name(T enum_t_value) {
  static_assert(::std::is_same<T, vboData_proto_VBO_TARGET>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function vboData_proto_VBO_TARGET_Name.");
  return vboData_proto_VBO_TARGET_Name(static_cast<vboData_proto_VBO_TARGET>(enum_t_value));
}
bool vboData_proto_VBO_TARGET_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_TARGET* value);
enum vboData_proto_VBO_COMPONENT : int {
  vboData_proto_VBO_COMPONENT_BYTE = 0,
  vboData_proto_VBO_COMPONENT_UNSIGNED_BYTE = 1,
  vboData_proto_VBO_COMPONENT_SHORT = 2,
  vboData_proto_VBO_COMPONENT_UNSIGNED_SHORT = 3,
  vboData_proto_VBO_COMPONENT_INT = 4,
  vboData_proto_VBO_COMPONENT_UNSIGNED_INT = 5,
  vboData_proto_VBO_COMPONENT_FLOAT = 6,
  vboData_proto_VBO_COMPONENT_DOUBLE = 7,
  vboData_proto_VBO_COMPONENT_vboData_proto_VBO_COMPONENT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  vboData_proto_VBO_COMPONENT_vboData_proto_VBO_COMPONENT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool vboData_proto_VBO_COMPONENT_IsValid(int value);
constexpr vboData_proto_VBO_COMPONENT vboData_proto_VBO_COMPONENT_VBO_COMPONENT_MIN = vboData_proto_VBO_COMPONENT_BYTE;
constexpr vboData_proto_VBO_COMPONENT vboData_proto_VBO_COMPONENT_VBO_COMPONENT_MAX = vboData_proto_VBO_COMPONENT_DOUBLE;
constexpr int vboData_proto_VBO_COMPONENT_VBO_COMPONENT_ARRAYSIZE = vboData_proto_VBO_COMPONENT_VBO_COMPONENT_MAX + 1;

const std::string& vboData_proto_VBO_COMPONENT_Name(vboData_proto_VBO_COMPONENT value);
template<typename T>
inline const std::string& vboData_proto_VBO_COMPONENT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, vboData_proto_VBO_COMPONENT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function vboData_proto_VBO_COMPONENT_Name.");
  return vboData_proto_VBO_COMPONENT_Name(static_cast<vboData_proto_VBO_COMPONENT>(enum_t_value));
}
bool vboData_proto_VBO_COMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_COMPONENT* value);
enum vboData_proto_VBO_TYPE : int {
  vboData_proto_VBO_TYPE_VEC2 = 0,
  vboData_proto_VBO_TYPE_VEC3 = 1,
  vboData_proto_VBO_TYPE_VEC4 = 2,
  vboData_proto_VBO_TYPE_MAT2 = 3,
  vboData_proto_VBO_TYPE_MAT3 = 4,
  vboData_proto_VBO_TYPE_MAT4 = 5,
  vboData_proto_VBO_TYPE_SCALAR = 6,
  vboData_proto_VBO_TYPE_VECTOR = 7,
  vboData_proto_VBO_TYPE_MATRIX = 8,
  vboData_proto_VBO_TYPE_vboData_proto_VBO_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  vboData_proto_VBO_TYPE_vboData_proto_VBO_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool vboData_proto_VBO_TYPE_IsValid(int value);
constexpr vboData_proto_VBO_TYPE vboData_proto_VBO_TYPE_VBO_TYPE_MIN = vboData_proto_VBO_TYPE_VEC2;
constexpr vboData_proto_VBO_TYPE vboData_proto_VBO_TYPE_VBO_TYPE_MAX = vboData_proto_VBO_TYPE_MATRIX;
constexpr int vboData_proto_VBO_TYPE_VBO_TYPE_ARRAYSIZE = vboData_proto_VBO_TYPE_VBO_TYPE_MAX + 1;

const std::string& vboData_proto_VBO_TYPE_Name(vboData_proto_VBO_TYPE value);
template<typename T>
inline const std::string& vboData_proto_VBO_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, vboData_proto_VBO_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function vboData_proto_VBO_TYPE_Name.");
  return vboData_proto_VBO_TYPE_Name(static_cast<vboData_proto_VBO_TYPE>(enum_t_value));
}
bool vboData_proto_VBO_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_TYPE* value);
// ===================================================================

class vboData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:vboData_proto) */ {
 public:
  inline vboData_proto() : vboData_proto(nullptr) {}
  ~vboData_proto() override;
  explicit PROTOBUF_CONSTEXPR vboData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vboData_proto(const vboData_proto& from);
  vboData_proto(vboData_proto&& from) noexcept
    : vboData_proto() {
    *this = ::std::move(from);
  }

  inline vboData_proto& operator=(const vboData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline vboData_proto& operator=(vboData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const vboData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const vboData_proto* internal_default_instance() {
    return reinterpret_cast<const vboData_proto*>(
               &_vboData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vboData_proto& a, vboData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(vboData_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vboData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vboData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vboData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const vboData_proto& from);
  void MergeFrom(const vboData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(vboData_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vboData_proto";
  }
  protected:
  explicit vboData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef vboData_proto_VBO_TARGET VBO_TARGET;
  static constexpr VBO_TARGET ARRAY_BUFFER =
    vboData_proto_VBO_TARGET_ARRAY_BUFFER;
  static constexpr VBO_TARGET ELEMENT_ARRAY_BUFFER =
    vboData_proto_VBO_TARGET_ELEMENT_ARRAY_BUFFER;
  static inline bool VBO_TARGET_IsValid(int value) {
    return vboData_proto_VBO_TARGET_IsValid(value);
  }
  static constexpr VBO_TARGET VBO_TARGET_MIN =
    vboData_proto_VBO_TARGET_VBO_TARGET_MIN;
  static constexpr VBO_TARGET VBO_TARGET_MAX =
    vboData_proto_VBO_TARGET_VBO_TARGET_MAX;
  static constexpr int VBO_TARGET_ARRAYSIZE =
    vboData_proto_VBO_TARGET_VBO_TARGET_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VBO_TARGET_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VBO_TARGET>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VBO_TARGET_Name.");
    return vboData_proto_VBO_TARGET_Name(enum_t_value);
  }
  static inline bool VBO_TARGET_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VBO_TARGET* value) {
    return vboData_proto_VBO_TARGET_Parse(name, value);
  }

  typedef vboData_proto_VBO_COMPONENT VBO_COMPONENT;
  static constexpr VBO_COMPONENT BYTE =
    vboData_proto_VBO_COMPONENT_BYTE;
  static constexpr VBO_COMPONENT UNSIGNED_BYTE =
    vboData_proto_VBO_COMPONENT_UNSIGNED_BYTE;
  static constexpr VBO_COMPONENT SHORT =
    vboData_proto_VBO_COMPONENT_SHORT;
  static constexpr VBO_COMPONENT UNSIGNED_SHORT =
    vboData_proto_VBO_COMPONENT_UNSIGNED_SHORT;
  static constexpr VBO_COMPONENT INT =
    vboData_proto_VBO_COMPONENT_INT;
  static constexpr VBO_COMPONENT UNSIGNED_INT =
    vboData_proto_VBO_COMPONENT_UNSIGNED_INT;
  static constexpr VBO_COMPONENT FLOAT =
    vboData_proto_VBO_COMPONENT_FLOAT;
  static constexpr VBO_COMPONENT DOUBLE =
    vboData_proto_VBO_COMPONENT_DOUBLE;
  static inline bool VBO_COMPONENT_IsValid(int value) {
    return vboData_proto_VBO_COMPONENT_IsValid(value);
  }
  static constexpr VBO_COMPONENT VBO_COMPONENT_MIN =
    vboData_proto_VBO_COMPONENT_VBO_COMPONENT_MIN;
  static constexpr VBO_COMPONENT VBO_COMPONENT_MAX =
    vboData_proto_VBO_COMPONENT_VBO_COMPONENT_MAX;
  static constexpr int VBO_COMPONENT_ARRAYSIZE =
    vboData_proto_VBO_COMPONENT_VBO_COMPONENT_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VBO_COMPONENT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VBO_COMPONENT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VBO_COMPONENT_Name.");
    return vboData_proto_VBO_COMPONENT_Name(enum_t_value);
  }
  static inline bool VBO_COMPONENT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VBO_COMPONENT* value) {
    return vboData_proto_VBO_COMPONENT_Parse(name, value);
  }

  typedef vboData_proto_VBO_TYPE VBO_TYPE;
  static constexpr VBO_TYPE VEC2 =
    vboData_proto_VBO_TYPE_VEC2;
  static constexpr VBO_TYPE VEC3 =
    vboData_proto_VBO_TYPE_VEC3;
  static constexpr VBO_TYPE VEC4 =
    vboData_proto_VBO_TYPE_VEC4;
  static constexpr VBO_TYPE MAT2 =
    vboData_proto_VBO_TYPE_MAT2;
  static constexpr VBO_TYPE MAT3 =
    vboData_proto_VBO_TYPE_MAT3;
  static constexpr VBO_TYPE MAT4 =
    vboData_proto_VBO_TYPE_MAT4;
  static constexpr VBO_TYPE SCALAR =
    vboData_proto_VBO_TYPE_SCALAR;
  static constexpr VBO_TYPE VECTOR =
    vboData_proto_VBO_TYPE_VECTOR;
  static constexpr VBO_TYPE MATRIX =
    vboData_proto_VBO_TYPE_MATRIX;
  static inline bool VBO_TYPE_IsValid(int value) {
    return vboData_proto_VBO_TYPE_IsValid(value);
  }
  static constexpr VBO_TYPE VBO_TYPE_MIN =
    vboData_proto_VBO_TYPE_VBO_TYPE_MIN;
  static constexpr VBO_TYPE VBO_TYPE_MAX =
    vboData_proto_VBO_TYPE_VBO_TYPE_MAX;
  static constexpr int VBO_TYPE_ARRAYSIZE =
    vboData_proto_VBO_TYPE_VBO_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VBO_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VBO_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VBO_TYPE_Name.");
    return vboData_proto_VBO_TYPE_Name(enum_t_value);
  }
  static inline bool VBO_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VBO_TYPE* value) {
    return vboData_proto_VBO_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPoDataFieldNumber = 7,
    kTargetTypeFieldNumber = 1,
    kComponentTypeFieldNumber = 2,
    kVboTypeFieldNumber = 3,
    kAttribIndexFieldNumber = 4,
    kCountFieldNumber = 5,
    kDataSizeFieldNumber = 6,
  };
  // optional bytes poData = 7;
  bool has_podata() const;
  private:
  bool _internal_has_podata() const;
  public:
  void clear_podata();
  const std::string& podata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_podata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_podata();
  PROTOBUF_NODISCARD std::string* release_podata();
  void set_allocated_podata(std::string* podata);
  private:
  const std::string& _internal_podata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_podata(const std::string& value);
  std::string* _internal_mutable_podata();
  public:

  // optional .vboData_proto.VBO_TARGET targetType = 1;
  bool has_targettype() const;
  private:
  bool _internal_has_targettype() const;
  public:
  void clear_targettype();
  ::vboData_proto_VBO_TARGET targettype() const;
  void set_targettype(::vboData_proto_VBO_TARGET value);
  private:
  ::vboData_proto_VBO_TARGET _internal_targettype() const;
  void _internal_set_targettype(::vboData_proto_VBO_TARGET value);
  public:

  // optional .vboData_proto.VBO_COMPONENT componentType = 2;
  bool has_componenttype() const;
  private:
  bool _internal_has_componenttype() const;
  public:
  void clear_componenttype();
  ::vboData_proto_VBO_COMPONENT componenttype() const;
  void set_componenttype(::vboData_proto_VBO_COMPONENT value);
  private:
  ::vboData_proto_VBO_COMPONENT _internal_componenttype() const;
  void _internal_set_componenttype(::vboData_proto_VBO_COMPONENT value);
  public:

  // optional .vboData_proto.VBO_TYPE vboType = 3;
  bool has_vbotype() const;
  private:
  bool _internal_has_vbotype() const;
  public:
  void clear_vbotype();
  ::vboData_proto_VBO_TYPE vbotype() const;
  void set_vbotype(::vboData_proto_VBO_TYPE value);
  private:
  ::vboData_proto_VBO_TYPE _internal_vbotype() const;
  void _internal_set_vbotype(::vboData_proto_VBO_TYPE value);
  public:

  // optional uint32 attribIndex = 4;
  bool has_attribindex() const;
  private:
  bool _internal_has_attribindex() const;
  public:
  void clear_attribindex();
  uint32_t attribindex() const;
  void set_attribindex(uint32_t value);
  private:
  uint32_t _internal_attribindex() const;
  void _internal_set_attribindex(uint32_t value);
  public:

  // optional uint32 count = 5;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional uint32 dataSize = 6;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  uint32_t datasize() const;
  void set_datasize(uint32_t value);
  private:
  uint32_t _internal_datasize() const;
  void _internal_set_datasize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vboData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr podata_;
    int targettype_;
    int componenttype_;
    int vbotype_;
    uint32_t attribindex_;
    uint32_t count_;
    uint32_t datasize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vboData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vboData_proto

// optional .vboData_proto.VBO_TARGET targetType = 1;
inline bool vboData_proto::_internal_has_targettype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool vboData_proto::has_targettype() const {
  return _internal_has_targettype();
}
inline void vboData_proto::clear_targettype() {
  _impl_.targettype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::vboData_proto_VBO_TARGET vboData_proto::_internal_targettype() const {
  return static_cast< ::vboData_proto_VBO_TARGET >(_impl_.targettype_);
}
inline ::vboData_proto_VBO_TARGET vboData_proto::targettype() const {
  // @@protoc_insertion_point(field_get:vboData_proto.targetType)
  return _internal_targettype();
}
inline void vboData_proto::_internal_set_targettype(::vboData_proto_VBO_TARGET value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.targettype_ = value;
}
inline void vboData_proto::set_targettype(::vboData_proto_VBO_TARGET value) {
  _internal_set_targettype(value);
  // @@protoc_insertion_point(field_set:vboData_proto.targetType)
}

// optional .vboData_proto.VBO_COMPONENT componentType = 2;
inline bool vboData_proto::_internal_has_componenttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool vboData_proto::has_componenttype() const {
  return _internal_has_componenttype();
}
inline void vboData_proto::clear_componenttype() {
  _impl_.componenttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::vboData_proto_VBO_COMPONENT vboData_proto::_internal_componenttype() const {
  return static_cast< ::vboData_proto_VBO_COMPONENT >(_impl_.componenttype_);
}
inline ::vboData_proto_VBO_COMPONENT vboData_proto::componenttype() const {
  // @@protoc_insertion_point(field_get:vboData_proto.componentType)
  return _internal_componenttype();
}
inline void vboData_proto::_internal_set_componenttype(::vboData_proto_VBO_COMPONENT value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.componenttype_ = value;
}
inline void vboData_proto::set_componenttype(::vboData_proto_VBO_COMPONENT value) {
  _internal_set_componenttype(value);
  // @@protoc_insertion_point(field_set:vboData_proto.componentType)
}

// optional .vboData_proto.VBO_TYPE vboType = 3;
inline bool vboData_proto::_internal_has_vbotype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool vboData_proto::has_vbotype() const {
  return _internal_has_vbotype();
}
inline void vboData_proto::clear_vbotype() {
  _impl_.vbotype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::vboData_proto_VBO_TYPE vboData_proto::_internal_vbotype() const {
  return static_cast< ::vboData_proto_VBO_TYPE >(_impl_.vbotype_);
}
inline ::vboData_proto_VBO_TYPE vboData_proto::vbotype() const {
  // @@protoc_insertion_point(field_get:vboData_proto.vboType)
  return _internal_vbotype();
}
inline void vboData_proto::_internal_set_vbotype(::vboData_proto_VBO_TYPE value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vbotype_ = value;
}
inline void vboData_proto::set_vbotype(::vboData_proto_VBO_TYPE value) {
  _internal_set_vbotype(value);
  // @@protoc_insertion_point(field_set:vboData_proto.vboType)
}

// optional uint32 attribIndex = 4;
inline bool vboData_proto::_internal_has_attribindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool vboData_proto::has_attribindex() const {
  return _internal_has_attribindex();
}
inline void vboData_proto::clear_attribindex() {
  _impl_.attribindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t vboData_proto::_internal_attribindex() const {
  return _impl_.attribindex_;
}
inline uint32_t vboData_proto::attribindex() const {
  // @@protoc_insertion_point(field_get:vboData_proto.attribIndex)
  return _internal_attribindex();
}
inline void vboData_proto::_internal_set_attribindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.attribindex_ = value;
}
inline void vboData_proto::set_attribindex(uint32_t value) {
  _internal_set_attribindex(value);
  // @@protoc_insertion_point(field_set:vboData_proto.attribIndex)
}

// optional uint32 count = 5;
inline bool vboData_proto::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool vboData_proto::has_count() const {
  return _internal_has_count();
}
inline void vboData_proto::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t vboData_proto::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t vboData_proto::count() const {
  // @@protoc_insertion_point(field_get:vboData_proto.count)
  return _internal_count();
}
inline void vboData_proto::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.count_ = value;
}
inline void vboData_proto::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:vboData_proto.count)
}

// optional uint32 dataSize = 6;
inline bool vboData_proto::_internal_has_datasize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool vboData_proto::has_datasize() const {
  return _internal_has_datasize();
}
inline void vboData_proto::clear_datasize() {
  _impl_.datasize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t vboData_proto::_internal_datasize() const {
  return _impl_.datasize_;
}
inline uint32_t vboData_proto::datasize() const {
  // @@protoc_insertion_point(field_get:vboData_proto.dataSize)
  return _internal_datasize();
}
inline void vboData_proto::_internal_set_datasize(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.datasize_ = value;
}
inline void vboData_proto::set_datasize(uint32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:vboData_proto.dataSize)
}

// optional bytes poData = 7;
inline bool vboData_proto::_internal_has_podata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool vboData_proto::has_podata() const {
  return _internal_has_podata();
}
inline void vboData_proto::clear_podata() {
  _impl_.podata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& vboData_proto::podata() const {
  // @@protoc_insertion_point(field_get:vboData_proto.poData)
  return _internal_podata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void vboData_proto::set_podata(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.podata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vboData_proto.poData)
}
inline std::string* vboData_proto::mutable_podata() {
  std::string* _s = _internal_mutable_podata();
  // @@protoc_insertion_point(field_mutable:vboData_proto.poData)
  return _s;
}
inline const std::string& vboData_proto::_internal_podata() const {
  return _impl_.podata_.Get();
}
inline void vboData_proto::_internal_set_podata(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.podata_.Set(value, GetArenaForAllocation());
}
inline std::string* vboData_proto::_internal_mutable_podata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.podata_.Mutable(GetArenaForAllocation());
}
inline std::string* vboData_proto::release_podata() {
  // @@protoc_insertion_point(field_release:vboData_proto.poData)
  if (!_internal_has_podata()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.podata_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.podata_.IsDefault()) {
    _impl_.podata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void vboData_proto::set_allocated_podata(std::string* podata) {
  if (podata != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.podata_.SetAllocated(podata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.podata_.IsDefault()) {
    _impl_.podata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vboData_proto.poData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vboData_proto_VBO_TARGET> : ::std::true_type {};
template <> struct is_proto_enum< ::vboData_proto_VBO_COMPONENT> : ::std::true_type {};
template <> struct is_proto_enum< ::vboData_proto_VBO_TYPE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vboData_2eproto
