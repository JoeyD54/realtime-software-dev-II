// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "vboData.pb.h"
#include "textureData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meshData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meshData_2eproto {
  static const uint32_t offsets[];
};
class meshData_proto;
struct meshData_protoDefaultTypeInternal;
extern meshData_protoDefaultTypeInternal _meshData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::meshData_proto* Arena::CreateMaybeMessage<::meshData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum meshData_proto_RENDER_MODE : int {
  meshData_proto_RENDER_MODE_MODE_POINTS = 0,
  meshData_proto_RENDER_MODE_MODE_LINE = 1,
  meshData_proto_RENDER_MODE_MODE_LINE_LOOP = 2,
  meshData_proto_RENDER_MODE_MODE_LINE_STRIP = 3,
  meshData_proto_RENDER_MODE_MODE_TRIANGLES = 4,
  meshData_proto_RENDER_MODE_MODE_TRIANGLE_STRIP = 5,
  meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN = 6,
  meshData_proto_RENDER_MODE_meshData_proto_RENDER_MODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  meshData_proto_RENDER_MODE_meshData_proto_RENDER_MODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool meshData_proto_RENDER_MODE_IsValid(int value);
constexpr meshData_proto_RENDER_MODE meshData_proto_RENDER_MODE_RENDER_MODE_MIN = meshData_proto_RENDER_MODE_MODE_POINTS;
constexpr meshData_proto_RENDER_MODE meshData_proto_RENDER_MODE_RENDER_MODE_MAX = meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN;
constexpr int meshData_proto_RENDER_MODE_RENDER_MODE_ARRAYSIZE = meshData_proto_RENDER_MODE_RENDER_MODE_MAX + 1;

const std::string& meshData_proto_RENDER_MODE_Name(meshData_proto_RENDER_MODE value);
template<typename T>
inline const std::string& meshData_proto_RENDER_MODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, meshData_proto_RENDER_MODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function meshData_proto_RENDER_MODE_Name.");
  return meshData_proto_RENDER_MODE_Name(static_cast<meshData_proto_RENDER_MODE>(enum_t_value));
}
bool meshData_proto_RENDER_MODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, meshData_proto_RENDER_MODE* value);
// ===================================================================

class meshData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:meshData_proto) */ {
 public:
  inline meshData_proto() : meshData_proto(nullptr) {}
  ~meshData_proto() override;
  explicit PROTOBUF_CONSTEXPR meshData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  meshData_proto(const meshData_proto& from);
  meshData_proto(meshData_proto&& from) noexcept
    : meshData_proto() {
    *this = ::std::move(from);
  }

  inline meshData_proto& operator=(const meshData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline meshData_proto& operator=(meshData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const meshData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const meshData_proto* internal_default_instance() {
    return reinterpret_cast<const meshData_proto*>(
               &_meshData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(meshData_proto& a, meshData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(meshData_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(meshData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  meshData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<meshData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const meshData_proto& from);
  void MergeFrom(const meshData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(meshData_proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "meshData_proto";
  }
  protected:
  explicit meshData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef meshData_proto_RENDER_MODE RENDER_MODE;
  static constexpr RENDER_MODE MODE_POINTS =
    meshData_proto_RENDER_MODE_MODE_POINTS;
  static constexpr RENDER_MODE MODE_LINE =
    meshData_proto_RENDER_MODE_MODE_LINE;
  static constexpr RENDER_MODE MODE_LINE_LOOP =
    meshData_proto_RENDER_MODE_MODE_LINE_LOOP;
  static constexpr RENDER_MODE MODE_LINE_STRIP =
    meshData_proto_RENDER_MODE_MODE_LINE_STRIP;
  static constexpr RENDER_MODE MODE_TRIANGLES =
    meshData_proto_RENDER_MODE_MODE_TRIANGLES;
  static constexpr RENDER_MODE MODE_TRIANGLE_STRIP =
    meshData_proto_RENDER_MODE_MODE_TRIANGLE_STRIP;
  static constexpr RENDER_MODE MODE_TRIANGLE_FAN =
    meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN;
  static inline bool RENDER_MODE_IsValid(int value) {
    return meshData_proto_RENDER_MODE_IsValid(value);
  }
  static constexpr RENDER_MODE RENDER_MODE_MIN =
    meshData_proto_RENDER_MODE_RENDER_MODE_MIN;
  static constexpr RENDER_MODE RENDER_MODE_MAX =
    meshData_proto_RENDER_MODE_RENDER_MODE_MAX;
  static constexpr int RENDER_MODE_ARRAYSIZE =
    meshData_proto_RENDER_MODE_RENDER_MODE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RENDER_MODE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RENDER_MODE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RENDER_MODE_Name.");
    return meshData_proto_RENDER_MODE_Name(enum_t_value);
  }
  static inline bool RENDER_MODE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RENDER_MODE* value) {
    return meshData_proto_RENDER_MODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPMeshNameFieldNumber = 1,
    kVboVertFieldNumber = 5,
    kVboNormFieldNumber = 6,
    kVboUvFieldNumber = 7,
    kVboIndexFieldNumber = 8,
    kTextColorFieldNumber = 9,
    kModeFieldNumber = 2,
    kTriCountFieldNumber = 3,
    kVertCountFieldNumber = 4,
  };
  // optional bytes pMeshName = 1;
  bool has_pmeshname() const;
  private:
  bool _internal_has_pmeshname() const;
  public:
  void clear_pmeshname();
  const std::string& pmeshname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pmeshname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pmeshname();
  PROTOBUF_NODISCARD std::string* release_pmeshname();
  void set_allocated_pmeshname(std::string* pmeshname);
  private:
  const std::string& _internal_pmeshname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pmeshname(const std::string& value);
  std::string* _internal_mutable_pmeshname();
  public:

  // optional .vboData_proto vbo_vert = 5;
  bool has_vbo_vert() const;
  private:
  bool _internal_has_vbo_vert() const;
  public:
  void clear_vbo_vert();
  const ::vboData_proto& vbo_vert() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_vert();
  ::vboData_proto* mutable_vbo_vert();
  void set_allocated_vbo_vert(::vboData_proto* vbo_vert);
  private:
  const ::vboData_proto& _internal_vbo_vert() const;
  ::vboData_proto* _internal_mutable_vbo_vert();
  public:
  void unsafe_arena_set_allocated_vbo_vert(
      ::vboData_proto* vbo_vert);
  ::vboData_proto* unsafe_arena_release_vbo_vert();

  // optional .vboData_proto vbo_norm = 6;
  bool has_vbo_norm() const;
  private:
  bool _internal_has_vbo_norm() const;
  public:
  void clear_vbo_norm();
  const ::vboData_proto& vbo_norm() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_norm();
  ::vboData_proto* mutable_vbo_norm();
  void set_allocated_vbo_norm(::vboData_proto* vbo_norm);
  private:
  const ::vboData_proto& _internal_vbo_norm() const;
  ::vboData_proto* _internal_mutable_vbo_norm();
  public:
  void unsafe_arena_set_allocated_vbo_norm(
      ::vboData_proto* vbo_norm);
  ::vboData_proto* unsafe_arena_release_vbo_norm();

  // optional .vboData_proto vbo_uv = 7;
  bool has_vbo_uv() const;
  private:
  bool _internal_has_vbo_uv() const;
  public:
  void clear_vbo_uv();
  const ::vboData_proto& vbo_uv() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_uv();
  ::vboData_proto* mutable_vbo_uv();
  void set_allocated_vbo_uv(::vboData_proto* vbo_uv);
  private:
  const ::vboData_proto& _internal_vbo_uv() const;
  ::vboData_proto* _internal_mutable_vbo_uv();
  public:
  void unsafe_arena_set_allocated_vbo_uv(
      ::vboData_proto* vbo_uv);
  ::vboData_proto* unsafe_arena_release_vbo_uv();

  // optional .vboData_proto vbo_index = 8;
  bool has_vbo_index() const;
  private:
  bool _internal_has_vbo_index() const;
  public:
  void clear_vbo_index();
  const ::vboData_proto& vbo_index() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_index();
  ::vboData_proto* mutable_vbo_index();
  void set_allocated_vbo_index(::vboData_proto* vbo_index);
  private:
  const ::vboData_proto& _internal_vbo_index() const;
  ::vboData_proto* _internal_mutable_vbo_index();
  public:
  void unsafe_arena_set_allocated_vbo_index(
      ::vboData_proto* vbo_index);
  ::vboData_proto* unsafe_arena_release_vbo_index();

  // optional .textureData_proto text_color = 9;
  bool has_text_color() const;
  private:
  bool _internal_has_text_color() const;
  public:
  void clear_text_color();
  const ::textureData_proto& text_color() const;
  PROTOBUF_NODISCARD ::textureData_proto* release_text_color();
  ::textureData_proto* mutable_text_color();
  void set_allocated_text_color(::textureData_proto* text_color);
  private:
  const ::textureData_proto& _internal_text_color() const;
  ::textureData_proto* _internal_mutable_text_color();
  public:
  void unsafe_arena_set_allocated_text_color(
      ::textureData_proto* text_color);
  ::textureData_proto* unsafe_arena_release_text_color();

  // optional .meshData_proto.RENDER_MODE mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::meshData_proto_RENDER_MODE mode() const;
  void set_mode(::meshData_proto_RENDER_MODE value);
  private:
  ::meshData_proto_RENDER_MODE _internal_mode() const;
  void _internal_set_mode(::meshData_proto_RENDER_MODE value);
  public:

  // optional uint32 triCount = 3;
  bool has_tricount() const;
  private:
  bool _internal_has_tricount() const;
  public:
  void clear_tricount();
  uint32_t tricount() const;
  void set_tricount(uint32_t value);
  private:
  uint32_t _internal_tricount() const;
  void _internal_set_tricount(uint32_t value);
  public:

  // optional uint32 vertCount = 4;
  bool has_vertcount() const;
  private:
  bool _internal_has_vertcount() const;
  public:
  void clear_vertcount();
  uint32_t vertcount() const;
  void set_vertcount(uint32_t value);
  private:
  uint32_t _internal_vertcount() const;
  void _internal_set_vertcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:meshData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pmeshname_;
    ::vboData_proto* vbo_vert_;
    ::vboData_proto* vbo_norm_;
    ::vboData_proto* vbo_uv_;
    ::vboData_proto* vbo_index_;
    ::textureData_proto* text_color_;
    int mode_;
    uint32_t tricount_;
    uint32_t vertcount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// meshData_proto

// optional bytes pMeshName = 1;
inline bool meshData_proto::_internal_has_pmeshname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool meshData_proto::has_pmeshname() const {
  return _internal_has_pmeshname();
}
inline void meshData_proto::clear_pmeshname() {
  _impl_.pmeshname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& meshData_proto::pmeshname() const {
  // @@protoc_insertion_point(field_get:meshData_proto.pMeshName)
  return _internal_pmeshname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void meshData_proto::set_pmeshname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pmeshname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:meshData_proto.pMeshName)
}
inline std::string* meshData_proto::mutable_pmeshname() {
  std::string* _s = _internal_mutable_pmeshname();
  // @@protoc_insertion_point(field_mutable:meshData_proto.pMeshName)
  return _s;
}
inline const std::string& meshData_proto::_internal_pmeshname() const {
  return _impl_.pmeshname_.Get();
}
inline void meshData_proto::_internal_set_pmeshname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pmeshname_.Set(value, GetArenaForAllocation());
}
inline std::string* meshData_proto::_internal_mutable_pmeshname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pmeshname_.Mutable(GetArenaForAllocation());
}
inline std::string* meshData_proto::release_pmeshname() {
  // @@protoc_insertion_point(field_release:meshData_proto.pMeshName)
  if (!_internal_has_pmeshname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pmeshname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pmeshname_.IsDefault()) {
    _impl_.pmeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void meshData_proto::set_allocated_pmeshname(std::string* pmeshname) {
  if (pmeshname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pmeshname_.SetAllocated(pmeshname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pmeshname_.IsDefault()) {
    _impl_.pmeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.pMeshName)
}

// optional .meshData_proto.RENDER_MODE mode = 2;
inline bool meshData_proto::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool meshData_proto::has_mode() const {
  return _internal_has_mode();
}
inline void meshData_proto::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::meshData_proto_RENDER_MODE meshData_proto::_internal_mode() const {
  return static_cast< ::meshData_proto_RENDER_MODE >(_impl_.mode_);
}
inline ::meshData_proto_RENDER_MODE meshData_proto::mode() const {
  // @@protoc_insertion_point(field_get:meshData_proto.mode)
  return _internal_mode();
}
inline void meshData_proto::_internal_set_mode(::meshData_proto_RENDER_MODE value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mode_ = value;
}
inline void meshData_proto::set_mode(::meshData_proto_RENDER_MODE value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:meshData_proto.mode)
}

// optional uint32 triCount = 3;
inline bool meshData_proto::_internal_has_tricount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool meshData_proto::has_tricount() const {
  return _internal_has_tricount();
}
inline void meshData_proto::clear_tricount() {
  _impl_.tricount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t meshData_proto::_internal_tricount() const {
  return _impl_.tricount_;
}
inline uint32_t meshData_proto::tricount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.triCount)
  return _internal_tricount();
}
inline void meshData_proto::_internal_set_tricount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.tricount_ = value;
}
inline void meshData_proto::set_tricount(uint32_t value) {
  _internal_set_tricount(value);
  // @@protoc_insertion_point(field_set:meshData_proto.triCount)
}

// optional uint32 vertCount = 4;
inline bool meshData_proto::_internal_has_vertcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool meshData_proto::has_vertcount() const {
  return _internal_has_vertcount();
}
inline void meshData_proto::clear_vertcount() {
  _impl_.vertcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t meshData_proto::_internal_vertcount() const {
  return _impl_.vertcount_;
}
inline uint32_t meshData_proto::vertcount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.vertCount)
  return _internal_vertcount();
}
inline void meshData_proto::_internal_set_vertcount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vertcount_ = value;
}
inline void meshData_proto::set_vertcount(uint32_t value) {
  _internal_set_vertcount(value);
  // @@protoc_insertion_point(field_set:meshData_proto.vertCount)
}

// optional .vboData_proto vbo_vert = 5;
inline bool meshData_proto::_internal_has_vbo_vert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_vert_ != nullptr);
  return value;
}
inline bool meshData_proto::has_vbo_vert() const {
  return _internal_has_vbo_vert();
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_vert() const {
  const ::vboData_proto* p = _impl_.vbo_vert_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_vert() const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_vert)
  return _internal_vbo_vert();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_vert(
    ::vboData_proto* vbo_vert) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_vert_);
  }
  _impl_.vbo_vert_ = vbo_vert;
  if (vbo_vert) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_vert)
}
inline ::vboData_proto* meshData_proto::release_vbo_vert() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::vboData_proto* temp = _impl_.vbo_vert_;
  _impl_.vbo_vert_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_vert() {
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_vert)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::vboData_proto* temp = _impl_.vbo_vert_;
  _impl_.vbo_vert_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_vert() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vbo_vert_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    _impl_.vbo_vert_ = p;
  }
  return _impl_.vbo_vert_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_vert() {
  ::vboData_proto* _msg = _internal_mutable_vbo_vert();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_vert)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_vert(::vboData_proto* vbo_vert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_vert_);
  }
  if (vbo_vert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_vert));
    if (message_arena != submessage_arena) {
      vbo_vert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_vert, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vbo_vert_ = vbo_vert;
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_vert)
}

// optional .vboData_proto vbo_norm = 6;
inline bool meshData_proto::_internal_has_vbo_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_norm_ != nullptr);
  return value;
}
inline bool meshData_proto::has_vbo_norm() const {
  return _internal_has_vbo_norm();
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_norm() const {
  const ::vboData_proto* p = _impl_.vbo_norm_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_norm() const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_norm)
  return _internal_vbo_norm();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_norm(
    ::vboData_proto* vbo_norm) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_norm_);
  }
  _impl_.vbo_norm_ = vbo_norm;
  if (vbo_norm) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_norm)
}
inline ::vboData_proto* meshData_proto::release_vbo_norm() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::vboData_proto* temp = _impl_.vbo_norm_;
  _impl_.vbo_norm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_norm() {
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_norm)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::vboData_proto* temp = _impl_.vbo_norm_;
  _impl_.vbo_norm_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_norm() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vbo_norm_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    _impl_.vbo_norm_ = p;
  }
  return _impl_.vbo_norm_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_norm() {
  ::vboData_proto* _msg = _internal_mutable_vbo_norm();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_norm)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_norm(::vboData_proto* vbo_norm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_norm_);
  }
  if (vbo_norm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_norm));
    if (message_arena != submessage_arena) {
      vbo_norm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_norm, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vbo_norm_ = vbo_norm;
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_norm)
}

// optional .vboData_proto vbo_uv = 7;
inline bool meshData_proto::_internal_has_vbo_uv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_uv_ != nullptr);
  return value;
}
inline bool meshData_proto::has_vbo_uv() const {
  return _internal_has_vbo_uv();
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_uv() const {
  const ::vboData_proto* p = _impl_.vbo_uv_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_uv() const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_uv)
  return _internal_vbo_uv();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_uv(
    ::vboData_proto* vbo_uv) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_uv_);
  }
  _impl_.vbo_uv_ = vbo_uv;
  if (vbo_uv) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_uv)
}
inline ::vboData_proto* meshData_proto::release_vbo_uv() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::vboData_proto* temp = _impl_.vbo_uv_;
  _impl_.vbo_uv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_uv() {
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_uv)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::vboData_proto* temp = _impl_.vbo_uv_;
  _impl_.vbo_uv_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_uv() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.vbo_uv_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    _impl_.vbo_uv_ = p;
  }
  return _impl_.vbo_uv_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_uv() {
  ::vboData_proto* _msg = _internal_mutable_vbo_uv();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_uv)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_uv(::vboData_proto* vbo_uv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_uv_);
  }
  if (vbo_uv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_uv));
    if (message_arena != submessage_arena) {
      vbo_uv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_uv, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.vbo_uv_ = vbo_uv;
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_uv)
}

// optional .vboData_proto vbo_index = 8;
inline bool meshData_proto::_internal_has_vbo_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_index_ != nullptr);
  return value;
}
inline bool meshData_proto::has_vbo_index() const {
  return _internal_has_vbo_index();
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_index() const {
  const ::vboData_proto* p = _impl_.vbo_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_index() const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_index)
  return _internal_vbo_index();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_index(
    ::vboData_proto* vbo_index) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_index_);
  }
  _impl_.vbo_index_ = vbo_index;
  if (vbo_index) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_index)
}
inline ::vboData_proto* meshData_proto::release_vbo_index() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::vboData_proto* temp = _impl_.vbo_index_;
  _impl_.vbo_index_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_index() {
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_index)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::vboData_proto* temp = _impl_.vbo_index_;
  _impl_.vbo_index_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_index() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.vbo_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    _impl_.vbo_index_ = p;
  }
  return _impl_.vbo_index_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_index() {
  ::vboData_proto* _msg = _internal_mutable_vbo_index();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_index)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_index(::vboData_proto* vbo_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vbo_index_);
  }
  if (vbo_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_index));
    if (message_arena != submessage_arena) {
      vbo_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_index, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.vbo_index_ = vbo_index;
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_index)
}

// optional .textureData_proto text_color = 9;
inline bool meshData_proto::_internal_has_text_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_color_ != nullptr);
  return value;
}
inline bool meshData_proto::has_text_color() const {
  return _internal_has_text_color();
}
inline const ::textureData_proto& meshData_proto::_internal_text_color() const {
  const ::textureData_proto* p = _impl_.text_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::textureData_proto&>(
      ::_textureData_proto_default_instance_);
}
inline const ::textureData_proto& meshData_proto::text_color() const {
  // @@protoc_insertion_point(field_get:meshData_proto.text_color)
  return _internal_text_color();
}
inline void meshData_proto::unsafe_arena_set_allocated_text_color(
    ::textureData_proto* text_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_color_);
  }
  _impl_.text_color_ = text_color;
  if (text_color) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.text_color)
}
inline ::textureData_proto* meshData_proto::release_text_color() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::textureData_proto* temp = _impl_.text_color_;
  _impl_.text_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::textureData_proto* meshData_proto::unsafe_arena_release_text_color() {
  // @@protoc_insertion_point(field_release:meshData_proto.text_color)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::textureData_proto* temp = _impl_.text_color_;
  _impl_.text_color_ = nullptr;
  return temp;
}
inline ::textureData_proto* meshData_proto::_internal_mutable_text_color() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.text_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::textureData_proto>(GetArenaForAllocation());
    _impl_.text_color_ = p;
  }
  return _impl_.text_color_;
}
inline ::textureData_proto* meshData_proto::mutable_text_color() {
  ::textureData_proto* _msg = _internal_mutable_text_color();
  // @@protoc_insertion_point(field_mutable:meshData_proto.text_color)
  return _msg;
}
inline void meshData_proto::set_allocated_text_color(::textureData_proto* text_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_color_);
  }
  if (text_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_color));
    if (message_arena != submessage_arena) {
      text_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.text_color_ = text_color;
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.text_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::meshData_proto_RENDER_MODE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto
